##Â ğŸ”§Â ParteÂ 4:Â ObtenerÂ losÂ ModelosÂ Pre-entrenados

###Â OpciÃ³nÂ A:Â EntrenarÂ elÂ ModeloÂ (Opcional)

SiÂ quieresÂ entrenarÂ tuÂ propioÂ modelo,Â creaÂ `train_model.py`:

```python
importÂ pandasÂ asÂ pd
fromÂ sklearn.model_selectionÂ importÂ train_test_split
fromÂ sklearn.ensembleÂ importÂ RandomForestClassifier
fromÂ sklearn.preprocessingÂ importÂ StandardScaler
importÂ joblib

#Â CargarÂ dataset
urlÂ =Â "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
dfÂ =Â pd.read_csv(url,Â sep=';')

#Â PrepararÂ datos
#Â ConvertirÂ calidadÂ aÂ binario:Â >=6Â =Â highÂ (1),Â <6Â =Â lowÂ (0)
df['quality_binary']Â =Â (df['quality']Â >=Â 6).astype(int)

XÂ =Â df.drop(['quality',Â 'quality_binary'],Â axis=1)
yÂ =Â df['quality_binary']

#Â Split
X_train,Â X_test,Â y_train,Â y_testÂ =Â train_test_split(
Â Â Â Â X,Â y,Â test_size=0.2,Â random_state=42
)

#Â Escalar
scalerÂ =Â StandardScaler()
X_train_scaledÂ =Â scaler.fit_transform(X_train)
X_test_scaledÂ =Â scaler.transform(X_test)

#Â EntrenarÂ modelo
modelÂ =Â RandomForestClassifier(n_estimators=100,Â random_state=42)
model.fit(X_train_scaled,Â y_train)

#Â Evaluar
accuracyÂ =Â model.score(X_test_scaled,Â y_test)
print(f"Accuracy:Â {accuracy:.2%}")

#Â GuardarÂ modeloÂ yÂ scaler
joblib.dump(model,Â 'model.pkl')
joblib.dump(scaler,Â 'scaler.pkl')
print("ModeloÂ guardadoÂ exitosamente!")